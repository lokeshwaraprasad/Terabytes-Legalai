from flask import Flask, render_template, request, jsonify
import google.generativeai as genai
import os
import json
import uuid
from datetime import datetime

# Load environment variables (optional)
try:
    from dotenv import load_dotenv
    load_dotenv()
except:
    pass

app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY', 'your-secret-key-change-this-in-production')

# Document storage
DOCUMENTS_STORAGE = {}

# Configure Gemini API
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', 'AIzaSyDKKQNaefREXR7y8vkTJnlP8FrjrAQg-f0')
print(f"Using API Key: {GEMINI_API_KEY[:10]}...")

try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-pro')
    print("тЬЕ Gemini AI model initialized successfully")
except Exception as e:
    print(f"тЭМ Error initializing Gemini AI: {e}")
    model = None

# Sample legal documents
SAMPLE_DOCUMENTS = {
    'tamil': """
    роЪрпКродрпНродрпБ ро╡ро┐ро▒рпНрокройрпИ роТрокрпНрокроирпНродроорпН / PROPERTY SALE AGREEMENT

    ро╡ро┐ро▒рпНрокройрпИропро╛ро│ро░рпН: ро░ро╛рооройрпН (Ram Kumar)
    ро╡ро╛роЩрпНроХрпБрокро╡ро░рпН: роХрпБрооро╛ро░рпН (Kumar Rajan)
    роЪрпКродрпНродрпБ ро╡ро┐ро▓рпИ: тВ╣5,00,000 (роРроирпНродрпБ ро▓роЯрпНроЪроорпН ро░рпВрокро╛ропрпН)
    роиро┐ро▓роорпН роЕро│ро╡рпБ: 2400 роЪродрпБро░ роЕроЯро┐
    роорпБроХро╡ро░ро┐: роЪрпЖройрпНройрпИ, родрооро┐ро┤рпНроиро╛роЯрпБ, роЗроирпНродро┐ропро╛
    родрпЗродро┐: 15-09-2024

    роорпБроХрпНроХро┐роп ро╡ро┐родро┐роХро│рпН:
    1. ро╡ро╛роЩрпНроХрпБрокро╡ро░рпН 30 роиро╛роЯрпНроХро│рпБроХрпНроХрпБро│рпН роорпБро┤рпБ родрпКроХрпИропрпИропрпБроорпН роЪрпЖро▓рпБродрпНрод ро╡рпЗрогрпНроЯрпБроорпН
    2. роЪрпКродрпНродрпБ рокродро┐ро╡рпБ 60 роиро╛роЯрпНроХро│рпБроХрпНроХрпБро│рпН роорпБроЯро┐роХрпНроХрокрпНрокроЯ ро╡рпЗрогрпНроЯрпБроорпН
    3. ро╡ро┐ро▒рпНрокройрпИропро╛ро│ро░рпН роЪрпКродрпНродрпБ роЪрпБродрпНродрооро╛рой родро▓рпИрокрпНрокрпИ ро╡ро┤роЩрпНроХ ро╡рпЗрогрпНроЯрпБроорпН
    4. роОроирпНродро╡рпКро░рпБ роХроЯрпНроЯрогроорпБроорпН ро╡ро╛роЩрпНроХрпБрокро╡ро░рпН рокрпКро▒рпБрокрпНрокро┐ро▓рпН

    роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН:
    - роЪрпКродрпНродрпБ роорпАродрпБ роОроирпНродро╡рпКро░рпБ роХроЯройрпБроорпН роЗро▓рпНро▓рпИ роОройрпНрокродрпИ роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНродро╡рпБроорпН
    - роЪроЯрпНроЯро░рпАродро┐ропро╛рой роЖро╡рогроЩрпНроХро│рпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН
    - рокродро┐ро╡рпБ роХроЯрпНроЯрогроЩрпНроХро│рпИ роХрогроХрпНроХро┐ро▓рпН роОроЯрпБродрпНродрпБроХрпНроХрпКро│рпНро│ро╡рпБроорпН
    """,
    'english': """
    PROPERTY SALE AGREEMENT

    Seller: John Smith
    Buyer: Jane Doe
    Property Price: $50,000 (Fifty Thousand Dollars)
    Land Area: 2400 sq ft
    Address: 123 Main Street, New York, USA
    Date: September 15, 2024

    Key Terms and Conditions:
    1. Buyer must pay full amount within 30 days
    2. Property registration must be completed within 60 days
    3. Seller must provide clear title to the property
    4. All registration fees are buyer's responsibility

    Legal Clauses:
    - Property must be free from any encumbrances
    - Seller warrants clear ownership
    - Buyer responsible for due diligence
    - Dispute resolution through arbitration

    Red Alerts - Critical Risks:
    - Verify no outstanding loans on property
    - Check all legal documents thoroughly
    - Consider registration costs and taxes
    - Ensure property boundaries are clear
    - Verify seller's legal capacity to sell

    Important Deadlines:
    - Payment due: October 15, 2024
    - Registration deadline: November 15, 2024
    - Possession date: December 1, 2024
    """
}

def process_document_with_gemini(document_text, language):
    """Process document with Gemini AI for comprehensive bilingual analysis"""
    try:
        if model is None:
            return "тЭМ AI model is not available. Please check the API key configuration."
        
        prompt = f"""
        Analyze this legal document and provide a comprehensive analysis in BOTH English and Tamil. 
        Please structure your response with clear sections:

        Document Text:
        {document_text}

        Please provide the following sections:

        ## ЁЯУЛ **DOCUMENT OVERVIEW / роЖро╡рог роХрогрпНрогрпЛроЯрпНроЯроорпН**
        **English**: What type of legal document is this? Brief overview.
        **Tamil**: роЗродрпБ роОройрпНрой ро╡роХрпИропро╛рой роЪроЯрпНроЯ роЖро╡рогроорпН? роЪрпБро░рпБроХрпНроХрооро╛рой роХрогрпНрогрпЛроЯрпНроЯроорпН.

        ## ЁЯСе **PARTIES INVOLVED / рокроЩрпНроХрпЗро▒рпНрокро╛ро│ро░рпНроХро│рпН**
        **English**: Who are the main parties in this document?
        **Tamil**: роЗроирпНрод роЖро╡рогродрпНродро┐ро▓рпН роорпБроХрпНроХро┐роп рокроЩрпНроХрпЗро▒рпНрокро╛ро│ро░рпНроХро│рпН ропро╛ро░рпН?

        ## ЁЯПа **PROPERTY/ASSET DETAILS / роЪрпКродрпНродрпБ ро╡ро┐ро╡ро░роЩрпНроХро│рпН**
        **English**: What property or assets are being discussed?
        **Tamil**: роОроирпНрод роЪрпКродрпНродрпБ роЕро▓рпНро▓родрпБ роЪрпКродрпНродрпБроХрпНроХро│рпН рокро▒рпНро▒ро┐ ро╡ро┐ро╡ро╛родро┐роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ?

        ## ЁЯУЬ **KEY LEGAL CLAUSES / роорпБроХрпНроХро┐роп роЪроЯрпНроЯ ро╡ро┐родро┐роХро│рпН**
        **English**: Important legal clauses and their implications.
        **Tamil**: роорпБроХрпНроХро┐ропрооро╛рой роЪроЯрпНроЯ ро╡ро┐родро┐роХро│рпН рооро▒рпНро▒рпБроорпН роЕро╡ро▒рпНро▒ро┐ройрпН ро╡ро┐ро│рпИро╡рпБроХро│рпН.

        ## тЪая╕П **RED ALERTS - CRITICAL RISKS / роЪро┐ро╡рокрпНрокрпБ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН - роорпБроХрпНроХро┐ропрооро╛рой роЕрокро╛ропроЩрпНроХро│рпН**
        **English**: Critical risks, warnings, and things to be careful about.
        **Tamil**: роорпБроХрпНроХро┐ропрооро╛рой роЕрокро╛ропроЩрпНроХро│рпН, роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН рооро▒рпНро▒рпБроорпН роХро╡ройрооро╛роХ роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯро┐роп ро╡ро┐ро╖ропроЩрпНроХро│рпН.

        ## ЁЯУЕ **IMPORTANT DATES & AMOUNTS / роорпБроХрпНроХро┐ропрооро╛рой родрпЗродро┐роХро│рпН рооро▒рпНро▒рпБроорпН родрпКроХрпИроХро│рпН**
        **English**: Key dates, deadlines, and financial amounts.
        **Tamil**: роорпБроХрпНроХро┐ропрооро╛рой родрпЗродро┐роХро│рпН, роХро╛ро▓роХрпНроХрпЖроЯрпБроХрпНроХро│рпН рооро▒рпНро▒рпБроорпН роиро┐родро┐ родрпКроХрпИроХро│рпН.

        ## ЁЯУЭ **SIMPLE SUMMARY / роОро│ро┐роп роЪрпБро░рпБроХрпНроХроорпН**
        **English**: Easy-to-understand summary for non-legal professionals.
        **Tamil**: роЪроЯрпНроЯ роиро┐рокрпБрогро░рпНроХро│рпН роЕро▓рпНро▓ро╛родро╡ро░рпНроХро│рпБроХрпНроХрпБ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роОро│ро┐родро╛рой роЪрпБро░рпБроХрпНроХроорпН.

        ## ЁЯТб **RECOMMENDATIONS / рокро░ро┐роирпНродрпБро░рпИроХро│рпН**
        **English**: What should the parties do next?
        **Tamil**: рокроЩрпНроХрпЗро▒рпНрокро╛ро│ро░рпНроХро│рпН роЕроЯрпБродрпНродрпБ роОройрпНрой роЪрпЖропрпНроп ро╡рпЗрогрпНроЯрпБроорпН?

        Make sure to highlight any critical legal obligations, deadlines, or financial risks in both languages.
        """
        
        print(f"ЁЯдЦ Processing document with comprehensive bilingual analysis")
        response = model.generate_content(prompt)
        print("тЬЕ AI response received successfully")
        return response.text
        
    except Exception as e:
        print(f"тЭМ AI Error: {str(e)}")
        return f"тЭМ Error processing document with AI: {str(e)}"

def answer_question_with_gemini(question, document_text, language):
    """Answer questions about the document using Gemini AI with bilingual support"""
    try:
        if model is None:
            return "тЭМ AI model is not available. Please check the API key configuration."
        
        prompt = f"""
        Based on the following legal document, answer this question in BOTH English and Tamil:
        
        Question: {question}
        
        Document Text:
        {document_text}
        
        Please provide your answer in this format:

        ## ЁЯОп **DIRECT ANSWER / роирпЗро░роЯро┐ рокродро┐ро▓рпН**
        **English**: [Clear, direct answer to the question]
        **Tamil**: [родрооро┐ро┤ро┐ро▓рпН родрпЖро│ро┐ро╡ро╛рой, роирпЗро░роЯро┐ рокродро┐ро▓рпН]

        ## ЁЯУД **EVIDENCE FROM DOCUMENT / роЖро╡рогродрпНродро┐ро▓ро┐ро░рпБроирпНродрпБ роЪро╛ройрпНро▒рпБ**
        **English**: [Specific quotes or references from the document]
        **Tamil**: [роЖро╡рогродрпНродро┐ро▓ро┐ро░рпБроирпНродрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роорпЗро▒рпНроХрпЛро│рпНроХро│рпН роЕро▓рпНро▓родрпБ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН]

        ## ЁЯТб **EXPLANATION / ро╡ро┐ро│роХрпНроХроорпН**
        **English**: [Why this answer is correct based on the document]
        **Tamil**: [роЖро╡рогродрпНродро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН роЗроирпНрод рокродро┐ро▓рпН роПройрпН роЪро░ро┐ропро╛ройродрпБ]

        ## тЪая╕П **IMPORTANT NOTES / роорпБроХрпНроХро┐ропрооро╛рой роХрпБро▒ро┐рокрпНрокрпБроХро│рпН**
        **English**: [Any additional important information related to the question]
        **Tamil**: [роХрпЗро│рпНро╡ро┐ропрпБроЯройрпН родрпКроЯро░рпНрокрпБроЯрпИроп роХрпВроЯрпБродро▓рпН роорпБроХрпНроХро┐ропрооро╛рой родроХро╡ро▓рпНроХро│рпН]

        If the question cannot be answered from the document, please say so clearly in both languages.
        """
        
        print(f"ЁЯдЦ Answering question with bilingual AI response")
        response = model.generate_content(prompt)
        print("тЬЕ AI Q&A response received successfully")
        return response.text
        
    except Exception as e:
        print(f"тЭМ AI Q&A Error: {str(e)}")
        return f"тЭМ Error answering question: {str(e)}"

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/process', methods=['POST'])
def process_document():
    try:
        # Ensure we get JSON data
        if not request.is_json:
            return jsonify({'error': 'Request must be JSON'}), 400
            
        data = request.get_json()
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
            
        document_text = data.get('document_text', '')
        language = data.get('language', 'English')
        
        if not document_text.strip():
            return jsonify({'error': 'Please provide document text'}), 400
        
        print(f"ЁЯУЭ Processing document (Language: {language})")
        # Process with Gemini AI
        result = process_document_with_gemini(document_text, language)
        
        return jsonify({
            'success': True,
            'result': result,
            'language': language
        })
        
    except Exception as e:
        print(f"тЭМ Process error: {str(e)}")
        return jsonify({'error': f'Error processing document: {str(e)}'}), 500

@app.route('/ask_text', methods=['POST'])
def ask_question_text():
    try:
        # Ensure we get JSON data
        if not request.is_json:
            return jsonify({'error': 'Request must be JSON'}), 400
            
        data = request.get_json()
        if not data:
            return jsonify({'error': 'No JSON data provided'}), 400
            
        question = data.get('question', '')
        document_text = data.get('document_text', '')
        language = data.get('language', 'English')
        
        if not question.strip() or not document_text.strip():
            return jsonify({'error': 'Please provide both question and document text'}), 400
        
        print(f"тЭУ Answering question (Language: {language})")
        # Answer question with Gemini AI
        answer = answer_question_with_gemini(question, document_text, language)
        
        return jsonify({
            'success': True,
            'answer': answer,
            'language': language
        })
        
    except Exception as e:
        print(f"тЭМ Q&A error: {str(e)}")
        return jsonify({'error': f'Error answering question: {str(e)}'}), 500

@app.route('/sample/<language>')
def get_sample_document(language):
    """Get sample document in specified language"""
    try:
        if language.lower() in SAMPLE_DOCUMENTS:
            return jsonify({
                'success': True,
                'document': SAMPLE_DOCUMENTS[language.lower()],  # Changed 'text' to 'document'
                'language': language
            })
        elif language.lower() == 'land':
            # Special case for land document - return English sample
            return jsonify({
                'success': True,
                'document': SAMPLE_DOCUMENTS['english'],
                'language': 'english'
            })
        else:
            return jsonify({'error': 'Language not supported'}), 400
            
    except Exception as e:
        return jsonify({'error': f'Error getting sample document: {str(e)}'}), 500

@app.route('/health')
def health_check():
    """Health check endpoint for Railway"""
    return jsonify({
        'status': 'healthy',
        'message': 'Terabytes Legal AI is running!',
        'timestamp': datetime.now().isoformat(),
        'ai_model_status': 'available' if model is not None else 'unavailable',
        'sample_documents': list(SAMPLE_DOCUMENTS.keys())
    })

@app.route('/debug')
def debug_info():
    """Debug endpoint to check AI and sample documents"""
    try:
        # Test AI with a simple prompt
        ai_test_result = "тЭМ AI not working"
        if model is not None:
            try:
                test_response = model.generate_content("Say 'AI is working' in one word")
                ai_test_result = f"тЬЕ AI working: {test_response.text}"
            except Exception as e:
                ai_test_result = f"тЭМ AI error: {str(e)}"
        
        return jsonify({
            'ai_status': ai_test_result,
            'sample_documents': SAMPLE_DOCUMENTS,
            'api_key_configured': bool(GEMINI_API_KEY),
            'model_initialized': model is not None
        })
    except Exception as e:
        return jsonify({'error': str(e)})

# Global error handler to ensure JSON responses
@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Endpoint not found'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({'error': 'Internal server error'}), 500

@app.errorhandler(Exception)
def handle_exception(e):
    print(f"тЭМ Unhandled error: {str(e)}")
    return jsonify({'error': 'An unexpected error occurred'}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
